{
  "_args": [
    [
      {
        "raw": "instafeed.js",
        "scope": null,
        "escapedName": "instafeed.js",
        "name": "instafeed.js",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/jenelle/Documents/wayfaringworker"
    ]
  ],
  "_from": "instafeed.js@latest",
  "_id": "instafeed.js@1.4.1",
  "_inCache": true,
  "_location": "/instafeed.js",
  "_nodeVersion": "0.12.3",
  "_npmUser": {
    "name": "stevenschobert",
    "email": "spschobert@gmail.com"
  },
  "_npmVersion": "2.9.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "instafeed.js",
    "scope": null,
    "escapedName": "instafeed.js",
    "name": "instafeed.js",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/instafeed.js/-/instafeed.js-1.4.1.tgz",
  "_shasum": "c29d7914563c11722b36cd921a91de2521f9cdaa",
  "_shrinkwrap": null,
  "_spec": "instafeed.js",
  "_where": "/Users/jenelle/Documents/wayfaringworker",
  "author": {
    "name": "Steven Schobert",
    "email": "spschobert@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/stevenschobert/instafeed.js/issues"
  },
  "dependencies": {},
  "description": "A simple Instagram javascript plugin for your website.",
  "devDependencies": {
    "chai": "3.0.x",
    "coffee-script": "1.9.x",
    "coffeelint": "1.10.x",
    "mocha": "2.2.x",
    "uglify-js": "1.3.x"
  },
  "directories": {},
  "dist": {
    "shasum": "c29d7914563c11722b36cd921a91de2521f9cdaa",
    "tarball": "https://registry.npmjs.org/instafeed.js/-/instafeed.js-1.4.1.tgz"
  },
  "gitHead": "11447a0298273e0679225457b7720a98d0dba94c",
  "homepage": "https://github.com/stevenschobert/instafeed.js#readme",
  "main": "./instafeed.js",
  "maintainers": [
    {
      "name": "stevenschobert",
      "email": "spschobert@gmail.com"
    }
  ],
  "name": "instafeed.js",
  "optionalDependencies": {},
  "readme": "instafeed.js\n============\n[![Build Status](https://travis-ci.org/stevenschobert/instafeed.js.svg?branch=master)](https://travis-ci.org/stevenschobert/instafeed.js)\n\nInstafeed is a dead-simple way to add Instagram photos to your website. No jQuery required, just good 'ol plain javascript.\n\n__Examples:__\n\n- [Hemeon.com](http://hemeon.com/) by [Marc Hemeon](https://twitter.com/hemeon)\n- [VinThomas.com](http://vinthomas.com/) by [Vin Thomas](https://twitter.com/vinthomas)\n- [The Kozik Cocoon](http://www.kozikcocoon.com/) by [Danny Palmer](http://twitter.com/dannyprose)\n\n__Buy me a coffee:__\n\nIf you enjoy using Instafeed.js and want to say thanks, you can leave me a small tip. All payments\nare securely handled through [Stripe](http://stripe.com).\n\n**[Leave me a tip &rarr;](https://plasso.co/spschobert@gmail.com)**\n\n## Installation\nSetting up Instafeed is pretty straight-forward. Just download the script and include it in your HTML:\n\n```html\n<script type=\"text/javascript\" src=\"path/to/instafeed.min.js\"></script>\n```\n\nInstafeed.js also supports AMD/CommonJS\n\n```js\n// AMD\nrequire([\"path/to/instafeed\"], function(Instafeed) {\n\n});\n\n// CommonJS\nvar Instafeed = require(\"instafeed\");\n```\n\n### NPM/Bower\n\nInstafeed.js is also available on NPM and Bower:\n\n```sh\nnpm install instafeed.js      # npm\nbower install instafeed.js    # bower\n```\n\n## Basic Usage\n\nHere's how easy it is to get all images tagged with __#awesome__:\n\n```html\n<script type=\"text/javascript\">\n    var feed = new Instafeed({\n        get: 'tagged',\n        tagName: 'awesome',\n        clientId: 'YOUR_CLIENT_ID'\n    });\n    feed.run();\n</script>\n```\n\nInstafeed with automatically look for a `<div id=\"instafeed\"></div>` and fill it with linked thumbnails. Of course, you can easily change this behavior using [standard options](#standard-options). Also check out the [advanced options](#advanced-options) for some advanced ways of customizing __Instafeed.js__.\n\n## Requirements\n\nThe only thing you'll need to get going is a valid __client id__ from Instagram's API. You can easily register for one on [Instagram's website](http://instagram.com/developer/register/).\n\nIf you need help with that step, just try Googling [\"How to get an Instagram client ID\"](https://google.com/search?q=How%20to%20get%20an%20instagram%20client%20id).\n\n## Standard Options\n\n- `clientId` - __Required__. Your API client id from Instagram.\n- `accessToken` - A valid oAuth token. Can be used in place of `clientId`.\n- `target` - Either the ID name or the DOM element itself where you want to add the images to.\n- `template` - Custom HTML template to use for images. See [templating](#templating).\n- `get` - Customize what Instafeed fetches. Available options are:\n    - `popular` (default) - Images from the popular page\n    - `tagged` - Images with a specific tag. Use `tagName` to specify the tag.\n    - `location` - Images from a location. Use `locationId` to specify the location\n    - `user` - Images from a user. Use `userId` to specify the user.\n- `tagName` (string) - Name of the tag to get. Use with `get: 'tagged'`.\n- `locationId` (number) - Unique id of a location to get. Use with `get: 'location'`.\n- `userId` (number) - Unique id of a user to get. Use with `get: 'user'`.\n- `sortBy` (string) - Sort the images in a set order. Available options are:\n    - `none` (default) - As they come from Instagram.\n    - `most-recent` - Newest to oldest.\n    - `least-recent` - Oldest to newest.\n    - `most-liked` - Highest # of likes to lowest.\n    - `least-liked` - Lowest # likes to highest.\n    - `most-commented` - Highest # of comments to lowest.\n    - `least-commented` - Lowest # of comments to highest.\n    - `random` - Random order.\n- `links` - Wrap the images with a link to the photo on Instagram.\n- `limit` - Maximum number of Images to add. __Max of 60__.\n- `useHttp` - By default, image urls are protocol-relative. Set to `true`\n  to use the standard `http://`.\n- `resolution` - Size of the images to get. Available options are:\n    - `thumbnail` (default) - 150x150\n    - `low_resolution` - 306x306\n    - `standard_resolution` - 612x612\n\n## Advanced Options\n\n- `before` (function) - A callback function called before fetching images from Instagram.\n- `after` (function) - A callback function called when images have been added to the page.\n- `success` (function) - A callback function called when Instagram returns valid data. (argument -> json object)\n- `error` (function) - A callback function called when there is an error fetching images. (argument -> string message)\n- `mock` (bool) - Set to true fetch data without inserting images into DOM. Use with __success__ callback.\n- `filter` (function) - A function used to exclude images from your results. The function will be\n  given the image data as an argument, and expects the function to return a boolean. See the example\n  below for more information.\n\n__Example Filter (get username + tagged):__\n\n```js\nvar feed = new Instafeed({\n  get: 'user',\n  userId: 'USER_ID',\n  filter: function(image) {\n    return image.tags.indexOf('TAG_NAME') >= 0;\n  }\n});\nfeed.run();\n```\n\nTo see a full list of properties that `image` has, see [issue #21](https://github.com/stevenschobert/instafeed.js/issues/21).\n\n## Templating\n\nThe easiest way to control the way Instafeed.js looks on your website is to use the __template__ option. You can write your own HTML markup and it will be used for every image that Instafeed.js fetches.\n\nHere's a quick example:\n\n```html\n<script type=\"text/javascript\">\n    var feed = new Instafeed({\n        get: 'popular',\n        tagName: 'awesome',\n        clientId: 'YOUR_CLIENT_ID',\n        template: '<a class=\"animation\" href=\"{{link}}\"><img src=\"{{image}}\" /></a>'\n    });\n    feed.run();\n</script>\n```\n\nNotice the `{{link}}` and `{{image}}`? The templating option provides several tags for you to use to control where variables are inserted into your HTML markup. Available keywors are:\n\n\n- `{{type}}` - the image's type. Can be `image` or `video`.\n- `{{width}}` - contains the image's width, in pixels.\n- `{{height}}` - contains the image's height, in pixels.\n- `{{orientation}}` - contains the image's orientation. Can be `square`, `portrait`, or `landscape`.\n- `{{link}}` - URL to view the image on Instagram's website.\n- `{{image}}` - URL of the image source. The size is inherited from the `resolution` option.\n- `{{id}}` - Unique ID of the image. Useful if you want to use [iPhone hooks](http://instagram.com/developer/iphone-hooks/) to open the images directly in the Instagram app.\n- `{{caption}}` - Image's caption text. Defaults to empty string if there isn't one.\n- `{{likes}}` - Number of likes the image has.\n- `{{comments}}` - Number of comments the image has.\n- `{{location}}` - Name of the location associated with the image. Defaults to empty string if there isn't one.\n- `{{model}}` - Full JSON object of the image. If you want to get a property of the image that isn't listed above you access it using dot-notation. (ex: `{{model.filter}}` would get the filter used.)\n\n## Portrait and Landscape Photos\n\nUntil **June 1, 2016**, Instagram's API will return square images (with white borders),\nregardless of how they were originally uploaded.\n\nIf you'd like to get images in their original landscape and portrait forms, you can opt-in\nto the API change by editing your Instagram API client, and clicking on the \"Migrations\" tab:\n\n<img width=\"757\" alt=\"screen shot 2015-10-31 at 2 02 56 pm\" src=\"https://cloud.githubusercontent.com/assets/896486/10865600/560ad6a6-7fde-11e5-8e14-2013e51eda7c.png\">\n\n> Note: If you have the `resolution` option set to `thumbnail` (default), all images will\nbe square regardless of your API settings.\n\n#### Image Size Template Helpers\n\nAs of __v1.4.0__, Instafeed.js includes several helpers you can use in your `template` option\nto work with the new image sizes. These helpers are meant primarily to help control styling\nof the images through CSS.\n\n- `{{width}}` - contains the image's width, in pixels\n- `{{height}}` - contains the image's height, in pixels\n- `{{orientation}}` - contains the image's orientation. Can be `square`, `portrait`, or `landscape`.\n\n## Getting images from your user account\n\nTo fetch images specifically from your account, set the `get` and `userId` options:\n\n```js\nvar userFeed = new Instafeed({\n  get: 'user',\n  userId: 'YOUR_USER_ID',\n  accessToken: 'YOUR_ACCESS_TOKEN'\n});\nuserFeed.run();\n```\n\n> Note: `YOUR_USER_ID` option corresponds to your Instagram **account ID (eg: 4385108)**, not your username. If you do not know your\naccount ID, do a quick google search for [\"What is my Instagram account ID?\"](https://google.com/search?q=What%20is%20my%20Instagram%20account%20ID%3F).\nThere a several free tools available online that will look it up for you.\n\n## Pagination\n\nAs of __v1.3__, Instafeed.js has a `.next()` method you can call to load more images from Instagram.\nUnder the hood, this uses the _pagination_ data from the API. Additionall, there is a helper\n`.hasNext()` method that you can use to check if pagination data is available.\n\nTogether these options can be used to create a \"Load More\" button:\n\n```js\n// grab out load more button\nvar loadButton = document.getElementById('load-more');\nvar feed = new Instafeed({\n  // every time we load more, run this function\n  after: function() {\n    // disable button if no more results to load\n    if (!this.hasNext()) {\n      loadButton.setAttribute('disabled', 'disabled');\n    }\n  },\n});\n\n// bind the load more button\nloadButton.addEventListener('click', function() {\n  feed.next();\n});\n\n// run our feed!\nfeed.run();\n```\n## Contributing to Development\n\nThis isn't a large project by any means, but I'm definitely welcome to any pull requests and contributions. Everything is written and tested in [CoffeeScript](http://coffeescript.org).\n\nYou can get your copy up and running for development quickly by cloning the repo and running [npm](http://npmjs.org/):\n\n```\n$ npm install\n```\n\nThis will install all the necessary test tools for testing. There is also a Makefile in the repo to make your tests quick and easy:\n\n- `make test` will run all the tests using [Mocha](https://github.com/mochajs/mocha) + [Chai](http://chaijs.com/) + [CoffeeLint](http://www.coffeelint.org/)\n- `make min` will create the minified version\n- `make` will run both the previous steps and compile everything\n\n## Change Log\n\n__1.4.1__\n\n- Fixes an issue where some data used in templates would get incorrectly escaped.\n\n__1.4.0__\n\n- `accessToken` is no longer required to fetch images from user accounts!\n- New template helpers for working with the new portrait and landscape images.\n- `target` can now accept a DOM node directly, instead of just a string ID, thanks [@juhamust](https://github.com/juhamust)!\n- Squashed the last (hopefully!) of the IE8 bugs.\n- Fixed image loading errors when using Instafeed.js on a local file protocol (`file://`). Thanks [@spoonben](https://github.com/spoonben)!\n- Added support from AMD and CommonJS.\n- Improved error messaging when Instafeed.js can't find it's target element on the page.\n- Instafeed.js no longer complains when trying to use strings for the `userId`, `locationId`, and `limit` options.\n\n__1.3.2__\n\n- Fixed the `useHttp` option when no template is set. Thanks @bartekn!\n\n__1.3.1__\n\n- Fixed an issue where `sortBy: \"most-recent\"` did not always correctly sort the images. Thanks\n  [Neil Campbell](https://github.com/neilcampbell)!\n- Changed the default `sortBy` option to be `none`.\n\n__1.3.0__\n\n- Image URLs are now protocol-relative by default. Use the new `useHttp` option to disable.\n- Added the ability to filter out images using the `filter` option.\n- Added pagination support using `.next()` and `.hasNext()` methods.\n- Removed the default `limit` of 15 images. The option is still supported, but by default no limit\n  is sent to the API.\n\n__1.2.1__\n\n- Fixed IE8 error \"Object doesn't support this action\".\n\n__1.2.0__\n\n- Added the ability to sort images! Use the __sortBy__ option.\n- Added __{{likes}}__, __{{comments}}__, __{{id}}__, __{{caption}}__, __{{location}}__, and __{{model}}__, tags to the __template__ option.\n\n__1.1.0__\n\n- Added option to use a custom html template with the __template__ option.\n- Added ability to fetch several feeds at the same time (create separate instances).\n- Added __before__, __success__, __after__, and __error__ callback options.\n- Added __mock__ option to only fetch data. Use with __success__ option for custom DOM manipulation.\n\n__1.0.0__\n\n- Initial release\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stevenschobert/instafeed.js.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.4.1"
}
